z <- matrix(1:20, nrow=4)
z
class(z)
str(z)    #str : 기억장소내용/ type,값 표시
dim(z)   # 행, 열 /차원을 의미함
class(state.x77)
class(iris)
str(state.x77)
str(iris)
is.matrix(state.x77)
is.matrix(iris.m)
is.data.frame(st)
is.data.frame(iris)
vector4 <- c( 1, 2, 3, '4', '5', '6' )
class( vector4 )
str( vector4 )
print( vector4 )
#
# 표준 입력 장치로부터 입력
#
# scan() : 표준 입력 장치로부터 입력 받는 함수
# readline() : 표준 입력 장치로부터 입력 받는 함수
# edit() : 표준 입력 장치로부터 표형식으로 입력 받는 함수
#
inputData <- scan()
class(inputData)
inputData
#
# 표준 입력 장치로부터 입력
#
# scan() : 표준 입력 장치로부터 입력 받는 함수
# readline() : 표준 입력 장치로부터 입력 받는 함수
# edit() : 표준 입력 장치로부터 표형식으로 입력 받는 함수
#
inputData <- scan()
class(inputData)
inputData
#
# 표준 입력 장치로부터 입력
#
# scan() : 표준 입력 장치로부터 입력 받는 함수
# readline() : 표준 입력 장치로부터 입력 받는 함수
# edit() : 표준 입력 장치로부터 표형식으로 입력 받는 함수
#
inputData <- scan()
inpuData <- scan(what=character())
class(inputData)
class(inputData)
inputData
inpuData <- scan(what=character())
class(inputData)
inputData <- scan(what=character())
class(inputData)
inputData
inputData <- readline('Input data ->')
class(inputData)
inputData
inputData <- readline('Input data ->')  # scan과 차이점: 빈줄 없이 하나만 받음
class(inputData)
inputData
number1 <- readline('Input number1:')
number2 <- readline('Input number2:')
number2 <- readline('Input number2:')
number1 <- readline( 'Input number1 : ' )
number1 <- readline( 'Input number1 : ' )
result <- number1 + number2
result
number2 <- readline( 'Input number2 : ' )
number1 <- readline( 'Input number1 : ' )
5
#
# Excel 파일 읽기
#
# Excel 파일 읽기용 패키지 설치
install.packages("xlsx")       # Excel파일 읽을때 사용하는 패키지
install.packages("rJava")      # Java 실행 패키지
# 기본 패키지 외에 설치된 패키지 사용
library(rJava)
library(xlsx)
df.xlsx <- read.xlsx(file="airquality.xlsx",
sheetIndex=1,
encoding="UTF-8")
df.xlsx
df.xlsx
df <- read.table(file="airquality.txt",header=T)
df
df.xlsx <- read.xlsx(file="airquality.xlsx",
sheetIndex=1,
encoding="UTF-8")
df.xlsx
df.xlsx <- read.xlsx(file="airquality.xlsx",
sheetIndex=1,
encoding="UTF-8")
#
# 5일차
#
# Text File 읽기 / setwd() : Derectory 변경 함수
setwd("C:\\Workspace\\WorkspaceR")
# 기본 패키지 외에 설치된 패키지 사용
library(rJava)
library(xlsx)
df.xlsx <- read.xlsx(file="airquality.xlsx",
sheetIndex=1,
encoding="UTF-8")
df.xlsx
class(df.xlsx)
str(df.xlsx)
head(df.xlsx)
tail(df.xlsx)
df.xlsx
class(df.xlsx)
score <- c(76,84,69,50,95,6,85,71,88,84)
which(score ==69)       # 조건에 만족하는 위치의 index
which(score>=85)
max(score)
which.max(score)        # 최고값의 index
min(score)
which.min(score)        # 최저값의 index
idx <- which(score>=60)
score[idx] <- 61
score
idx <- which(df.xlsx[, 1:2] == "NA", arr.ind = TRUE)
idx
#
# vector
#
v <- 1:10
v>5
any(v>5)      # 벡터의 요소중 조건에 만족하는게 있는가?
all(v>5)      # 벡터의 모든 요소가 조건에 만족하는가?
head(v)       # 처음부터 일정 개수( default : 6개)
tail(v)       # 끝에서부터 일정 개수 ( default : 6개)
head(v,3)
tail(v,3)
x <- c(1,2,3)
y <- c(3,4,5)
z <- c(3,1,2)
union(x,y)      # 합집합
intersect(x,y)  # 교집합
setdiff(x,y)    # 차집합
setequal(x,y)   # 동일한 요소가 있는가 확인
setwd("C:\\Workspace\\WorkspaceR")  # 파일 저장 경로 설정
df.txt <- read.table(file="airquality.txt",
header=T,
encoding="UTF-8")
df.txt
class(df.txt)
str(df.txt)
head(df.txt)
tail(df.txt)
#
# 벡터 원소값에 이른 지정
#
score <- c( 90, 85, 70 )
#
# 벡터 길이
#
length( score )
avg <- sum( v) / length( v )
avg
sum( v )                       # 합계
length(v)
#문2)
v1 <- 51:90
#2. 70보다 작은 수가 몇 개인지 출력
length( v1[ v1 < 70 ] )
length(v1<70)
v1[ v1 < 70 ]
v1<70
v1
vt <- c(TRUE, FALSE)
vt2 <- c(FALSE, TRUE)
vt&vt2              # 벡터 요소 각각에 대하여 AND 연산 수행
vt&&vt2             # 벡터 첫번쨰 요소에 대하여 AND 연산 수행
# 2.3 단일 변수 범주형 자료 탐색
#
# 단일 변수 범주형 자료 : 특성이 하나이면서 자료의 특성이 범주형인 자료
#   범주형 자료에 할 수 있는 기본 작업 : 자료에 포함된 관측값들의
#             (범주형일때) 도수분포표 <- 종류별로 개수를 세는 것,
#                                        종류별로 비율을 구하는 것,
#                                   시각화는 막대/원 그래프를 사용
#
favorite <- c('WINTER', 'SUMMER', 'SPRING',
'SUMMER', 'SUMMER', 'FALL',
'FALL','SUMMER','SPRING','SPRING')
favorite
class(favorite)
str(favorite)
dim(favorite)
# 도수분포표 작성
table(favorite)
# 도수 분포 비율율
table(favorite)/length(favorite)
# 도수 분포 비율
table(favorite)/length(favorite)
# 2.3 단일 변수 범주형 자료 탐색
#
# 단일 변수 범주형 자료 : 특성이 하나이면서 자료의 특성이 범주형인 자료
#   범주형 자료에 할 수 있는 기본 작업 : 자료에 포함된 관측값들의
#             (범주형일때) 도수분포표 <- 종류별로 개수를 세는 것,
#                                        종류별로 비율을 구하는 것,
#                                   시각화는 막대/원 그래프를 사용
#
favorite <- c('WINTER', 'SUMMER', 'SPRING',
'SUMMER', 'SUMMER', 'FALL',
'FALL','SUMMER','SPRING','SPRING')
favorite
# 도수분포표 작성
table(favorite)
# 도수 분포 비율
table(favorite)/length(favorite)
# 2.3 단일 변수 범주형 자료 탐색
#
# 단일 변수 범주형 자료 : 특성이 하나이면서 자료의 특성이 범주형인 자료
#   범주형 자료에 할 수 있는 기본 작업 : 자료에 포함된 관측값들의
#             (범주형일때) 도수분포표 <- 종류별로 개수를 세는 것,
#                                        종류별로 비율을 구하는 것,
#                                   시각화는 막대/원 그래프를 사용
#
favorite <- c('WINTER', 'SUMMER', 'SPRING',
'SUMMER', 'SUMMER', 'FALL',
'FALL','SUMMER','SPRING','SPRING')
# 도수 분포 비율
table(favorite)/length(favorite)
# 도수분포표 작성
table(favorite)
# 도수 분포 비율
table(favorite)/length(favorite)
(table(favorite)/length(favorite))*100
((table(favorite)/length(favorite))*100, %)
(table(favorite)/length(favorite))*100%
# 시각화(막대그래프)
ds <- table(favorite)
ds
class(ds)
str(ds)
dim(ds)
barplot(ds,main='favorite season')
ds.new <- ds[c(2,3,1,4)]
ds.new
barplot(ds.new,main='favorite season')
pie(ds, main = 'favorite season')
pie(ds.new, main='favorite season')
favorite.color <- c(2,3,2,1,1,2,2,
1,3,2,1,3,2,1,2)
ds <- table(favorite.color)
ds
barplot(ds,main='favorite.season')
color <- c('green','red','blue')
names(ds) <- colors;
names(ds) <- colors;
color <- c('green','red','blue')
names(ds) <- colors;
ds
barplot(ds,main='favorite season',
col=colors)
pie(ds,main='favorite season',
col=colors)
favorite.color <- c(2,3,2,1,1,2,2,
1,3,2,1,3,2,1,2)
ds <- table(favorite.color)
ds
barplot(ds,main='favorite season')
color <- c('green','red','blue')
names(ds) <- colors;
ds
ds <- table(favorite.color)
ds
barplot(ds,main='favorite season')
color <- c('green','red','blue')
names(ds) <- colors;
colors <- c('green','red','blue')
names(ds) <- colors;
ds
barplot(ds,main='favorite season',
col=colors)
pie(ds,main='favorite season',
col=colors)
favorite.color <- c(2,3,2,1,1,2,2,
1,3,2,1,3,2,1,2)
ds <- table(favorite.color)
ds
barplot(ds,main='favorite season')
colors <- c('green','red','blue')
names(ds) <- colors;
ds
favorite.color <- c(2,3,2,1,1,2,2,
1,3,2,1,3,2,1,2)
ds <- table(favorite.color)
# 시각화(막대그래프)
ds <- table(favorite)
ds
favorite.color <- c(2,3,2,1,1,2,2,
1,3,2,1,3,2,1,2)
favorite.color <- c(2,3,2,1,1,2,2,
1,3,2,1,3,2,1,2)
ds <- table(favorite.color)
ds
# 시각화(막대그래프)
ds <- table(favorite)
ds
barplot(ds,main='favorite season')
colors <- c('green','red','blue')
names(ds) <- colors
ds
barplot(ds,main='favorite season',
col=colors)
pie(ds,main='favorite season',
col=colors)
weight <- c(60,62,64,65,68,69)
weight
weight.heavy <- c(weight,120)
weigth.heavy
weight.heavy
#평균
mean(weight)
mean(weight.heavy)
weight.heavy
median(weight.heavy)
#중앙값
median(weight)
median(weight.heavy)
#중앙값
median(weight)
median(weight.heavy)
#절사평균
mean(weight, trim=0.2)
mean(weight.heavy,trim=0.2)
#사분위수
quantile(weight.heavy)
quantile(weight.heavy, (0:10) / 10 )
summary(weight.heavy)
quantile(weight.heavy, (0:10)/10)
quantile(weight.heavy, (0:9)/10)
quantile(weight.heavy, (0:9)/11)
quantile(weight.heavy, (0:9)/9)
quantile(weight.heavy, (0:8)/10)
quantile(weight.heavy, (0:7)/10)
# (0:10)/10 : 구간을 몇개로 나눌것인지를 지정
# 0.1~1.0 사이 백분율로 10%~100%
summary(weight.heavy)
#산포
#분산
var(weight)
#표준편차
sd(weight)
# 값의 범위 ( 최소값과 최대값)
range(weight)
# 최대값과 최소값의 차이
diff(range(weight))
diff(max-min)
diff(weight[weight])
diff(max(weight)-min(weight))
# 연속형 자료 시각화
# Histogram : 연속형 자료의 분포를 시각화하는 도구
#             연속형 자료에서의 구간을 나누고 구간에 속한
#             값들의 개수를 세는 방법으로 사용
class(cars)
str(cars)
# 최대값과 최소값의 차이
max(weigth)
weight <- c(60,62,64,65,68,69)
# 최대값과 최소값의 차이
max(weigth)
# 최대값과 최소값의 차이
max[weigth]
dist <- cars[,2]
dist
boxplot.stats(dist)  # 구체적인 값을 파악 할 때 사용
# $stats : 사분위수
# $n : 관측값의 수
# $conf : 중앙값에 대한 신뢰구간
# $out : 특이값(이상치) 목록
hist(dist, main = "Histogram for 제동거리",
xlab= "제동거리", ylab = "빈도수",
border="blue",col="green",
las=2,breaks=5)
hist(dist, main = "Histogram for 제동거리",
xlab= "제동거리", ylab = "빈도수",
border="blue",col="green",
las=1,breaks=5)
# $stats : 사분위수
# $n : 관측값의 수
# $conf : 중앙값에 대한 신뢰구간
# $out : 특이값(이상치) 목록
hist(dist, main = "Histogram for 제동거리",
xlab= "제동거리", ylab = "빈도수",
border="blue",col="green",
las=2,breaks=5)
hist(dist, main = "Histogram for 제동거리",
xlab= "제동거리", ylab = "빈도수",
border="blue",col="green",
las=1,breaks=4)
# $stats : 사분위수
# $n : 관측값의 수
# $conf : 중앙값에 대한 신뢰구간
# $out : 특이값(이상치) 목록
hist(dist, main = "Histogram for 제동거리",
xlab= "제동거리", ylab = "빈도수",
border="blue",col="green",
las=2,breaks=5)
# 상자 그래프(상자그림,box plot, 상자 수염 그래프)
# 사분위수를 그래프형태로 시각화하는 도구
# 상자그래프는 하나의 그래프로 데이터의 분포
# 형태를 포함한 다양한 정보를 전달
# - 자료의 전반적인 분포를 이해하는데 도움
# - 구체적인 최소/최대/중앙값을 알기는 어렵다.
boxplot(dist,main='자동차 제동거리')
#
# 2.1 List
#
# List : 동일 자료형, 다른 자료형을 저장할 수 있는 벡터
#
# list() : List 생성 함수
#          요소는 Key(이름) = value(값) 형식이다.
#
v <- c(90,85,70,84)
l <- list(name='hong', age=30, status=TRUE,score=v)
l
l[1]       #이름도 알고싶고 모양도 보고싶다, 전체를 알고 싶다 []
l[4]
l[[1]]     #값만 출력할때는 [[]]
l[[4]]
l[[4]][1]
l$name
l$score
#
# 2.1 List
#
# List : 동일 자료형, 다른 자료형을 저장할 수 있는 벡터
#
# list() : List 생성 함수
#          요소는 Key(이름) = value(값) 형식이다.
#
v <- c(90,85,70,84)
l <- list(name='hong', age=30, status=TRUE,score=v)
l
#
#2.2 factor( 범주형, categorical )
#
#factor 형 : 문자 형태로 저장되며 범위를 갖는 값을 저장
#           하는 data type
#factor() : 팩터형 벡터 생성 함수
#
bt <- c('A','B','B','O','AB','A')      # 문자형 벡터
bt.factor <- factor(bt)                # 팩터형 벡터
bt
bt.factor
bt[3]
bt.factor[3]
gender <- c('남','여','여','남','남','여','남')
gender.factor <- factor(gender)
gender
gender.factor
gender[5]
gender.factor[5]
levels(bt.factor)
levels(gender.factor)
as.integer(bt.factor)
as.integer(gender.factor)
gender.factor[5]
gender.factor[5] <- '중'
gender.factor
# 상자 그래프(상자그림,box plot, 상자 수염 그래프)
# 사분위수를 그래프형태로 시각화하는 도구
# 상자그래프는 하나의 그래프로 데이터의 분포
# 형태를 포함한 다양한 정보를 전달
# - 자료의 전반적인 분포를 이해하는데 도움
# - 구체적인 최소/최대/중앙값을 알기는 어렵다.
boxplot(dist,main='자동차 제동거리')
boxplot.stats(dist)
boxplot.stats(dist)$stats   # 정상범위 사분위수
boxplot.stats(dist)$n       # 관측치 수
boxplot.stats(dist)$conf    # 중앙값 신뢰구간
boxplot.stats(dist)$out     # 특이값(이상치) 목록
#일변량 연속형 데이터중 그룹으로 구성된 자료의 상자그래프
boxplot(Petal.Length~Species, data=iris,
main = '품종별 꽃받침 길이')
#일변량 연속형 데이터중 그룹으로 구성된 자료의 상자그래프
boxplot(Petal.Length~Species, data=iris,
main = '품종별 꽃잎잎 길이')
#일변량 연속형 데이터중 그룹으로 구성된 자료의 상자그래프
boxplot(Petal.Length~Species, data=iris,
main = '품종별 꽃잎 길이')
str(iris)
boxplot(iris$Petal.Length~iris$Species,
main = '품종별 꽃잎 길이')
#일변량 연속형 데이터중 그룹으로 구성된 자료의 상자그래프
boxplot(Petal.Length~Species, data=iris,
main = '품종별 꽃잎 길이')
boxplot(iris$Petal.Length~iris$Species,
main = '품종별 꽃잎 길이')
barplot(table(mtcars$carb), main="C",
xlab='carburetors', ylab='freq',
col='blue')
barplot(table(mtcars$cyl), main='Cyl',
xlab='cyl', ylab='freq',
col='red')
barplot(table(mtcars$gear),main='g',
xlab='gear',ylab='freq',
col='green')
par(mfrow=c(1,3))   # 1X3 가상화면 분할
barplot(table(mtcars$carb), main="C",
xlab='carburetors', ylab='freq',
col='blue')
barplot(table(mtcars$cyl), main='Cyl',
xlab='cyl', ylab='freq',
col='red')
barplot(table(mtcars$gear),main='g',
xlab='gear',ylab='freq',
col='green')
par(mfow=c(1,1))    #가상화면 분할 해제
